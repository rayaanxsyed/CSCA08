From: <Saved by Blink>
Snapshot-Content-Location: https://www.utsc.utoronto.ca/~atafliovich/csca08/assignments/a1/index.html
Subject: CSCA08H Assignment 1: Airplane Tickets
Date: Mon, 4 Mar 2024 20:48:12 -0500
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--Vo78ScV8lIYCIOiOemDYz7G8Du3bdCLrVIdDIfHPeK----"


------MultipartBoundary--Vo78ScV8lIYCIOiOemDYz7G8Du3bdCLrVIdDIfHPeK----
Content-Type: text/html
Content-ID: <frame-E8981EE3934D7E9C62E1FD588BCCCD72@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.utsc.utoronto.ca/~atafliovich/csca08/assignments/a1/index.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"robots" content=3D"noindex, nofollow">
    <link rel=3D"stylesheet" href=3D"https://www.utsc.utoronto.ca/~atafliov=
ich/csca08/assignments/a1/style.css" type=3D"text/css">
    <title>
      CSCA08H Assignment 1: Airplane Tickets
    </title>
  </head>
  <body data-new-gr-c-s-check-loaded=3D"14.1157.0" data-gr-ext-installed=3D=
"">
    <div class=3D"title">
      <h1>
        CSCA08H Assignment 1: Airplane Tickets
      </h1>
    </div>

    <h2>Goals of this Assignment</h2>

    <ul>
      <li>Use
	the <a href=3D"https://www.utsc.utoronto.ca/~atafliovich/csca08/lectures/w=
eek02/design_recipe.pdf">Function
	Design Recipe</a> to plan, implement, and test functions.
      </li>
      <li>Write function bodies using variables, numeric types, strings, an=
d conditional
	statements. (You can do this whole assignment with only the concepts from =
Weeks 1, 2, and 3
	of the course.)
      </li>
      <li>Learn to use Python 3, Wing 101, provided starter code, a checker=
 module, and other tools.
      </li>
    </ul>

    <h2>Starter code</h2>
    <p>
      For this assignment, we are giving you some files, including Python s=
tarter code files.
      Please download the <a href=3D"https://www.utsc.utoronto.ca/~atafliov=
ich/csca08/assignments/a1/a1.zip">Assignment 1 Files</a> and extract the zi=
p archive.
    </p>

    <p>
      There are two starter code Python files and a Python program that hel=
ps you check (<strong>not
      fully test!</strong>) your solutions for Python style violations:
    </p>
    <ul>
      <li> <code>tickets.py</code>
	<p>
	  This file contains some code that sets up your use of constants
	  from <code>constants.py</code>, a helper function for you to use (see th=
e table of
	  functions to implement <a href=3D"https://www.utsc.utoronto.ca/~atafliov=
ich/csca08/assignments/a1/index.html#functions_table">below</a>), <strong>s=
olutions</strong>
	  for several required functions for you to use as examples, as well as <s=
trong>headers and
	  docstrings</strong> (but not bodies) for several function you are to wri=
te, to help you
	  get started. Your job is to complete this file.
	</p>
      </li>

      <li> <code>constants.py</code>
	<p>
	  This file contains some useful <a href=3D"https://www.utsc.utoronto.ca/~=
atafliovich/csca08/assignments/a1/index.html#constants">constants</a> that =
you should use in
	  your solution. You will <strong>not</strong> modify this file.
	</p>
      </li>

      <li> <code>a1_checker.py</code>
	<p>
	  This is a checker program that you should use to check your
	  code. See <a href=3D"https://www.utsc.utoronto.ca/~atafliovich/csca08/as=
signments/a1/index.html#checker">below</a> for more information
	  about <code>a1_checker.py</code>.
	</p>
      </li>
    </ul>

    <h2 id=3D"ticket">
      The Airline Ticket
    </h2>

    <p>
      The typical airplane boarding pass contains many different pieces of =
information, including
      passenger information, seat, flight number, flight time, and so on. I=
n this assignment, we'll
      work with our own version of information you might find on a boarding=
 pass.
    </p>
    <p>
      We'll refer to the data we will work with just as a "ticket". A ticke=
t is a string, where
      different pieces of the string represent different kinds of informati=
on. Our ticket will
      include the following information:
    </p>
    <ul>
      <li>The date the ticket is for, including year, month, and day.</li>
      <li>Departure and arrival airport codes of the flight the ticket is f=
or.</li>
      <li>The seat assigned to the ticket, including the row number and the=
 seat within that row.</li>
      <li>The passenger's frequent flyer number, if applicable.</li>
    </ul>

    <p>
      A valid ticket will have either 17 or 21 characters. Below, we descri=
be what the different
      index ranges mean in a ticket.
    </p>

    <ul>
      <li> The date of the ticket consists of three pieces of information: =
year, month, and day.
	<ul>
	  <li>
	    Characters at indices from <code>YR</code> to <code>YR+3</code>, inclu=
sive, represent
	    the year the ticket is for. In a valid year, these four characters mus=
t be digits. We do
	    not place any other restrictions on the validity of the year field.
	  </li>
	  <li>
	    Characters at indices <code>MON</code> and <code>MON+1</code> represen=
t the month the
	    ticket is for. In a valid month, these two characters must be digits t=
hat represent a
	    number between 1 and 12, inclusive.
	  </li>
	  <li>
	    Characters at indices <code>DAY</code> and <code>DAY+1</code> represen=
t the day the
	    ticket is for. In a valid day, these two characters must be digits tha=
t represent a
	    number between 1 and the maximum number of days for the given month an=
d year. Recall
	    that months January, March, May, July, August, October and December ha=
ve 31 days, months
	    April, June, September, and November have 30 days, and the month of Fe=
bruary has 28 days
	    in a non-leap year and 29 days in a leap year. A leap year is a positi=
ve integer
	    multiple of 4 (except for years evenly divisible by 100, but not by 40=
0).
	  </li>
	</ul>
      </li>
      <li>
	Characters at indices from <code>DEP</code> to <code>DEP+2</code>, inclusi=
ve, represent the
	code of the departure airport. In a valid code, these three characters mus=
t be letters.
      </li>
      <li>
	Characters at indices from <code>ARR</code> to <code>ARR+2</code>, inclusi=
ve, represent the
	code of the arrival airport. In a valid code, these three characters must =
be letters. In a
	valid ticket, departure and arrival airports must be different.
      </li>
      <li>
	Characters at indices <code>ROW</code> and <code>ROW+1</code> represent th=
e row number of
	the ticket. In a valid row number, these two characters must be digits.
      </li>
      <li>
	The character at index <code>SEAT</code> represents the seat in a given ro=
w. A valid seat is
	the value of one of the
	constants <code>SA</code>, <code>SB</code>, <code>SC</code>, <code>SD</cod=
e>, <code>SE</code>,
	or <code>SF</code>, which for us represent seats "A", "B", "C", "D", "E", =
and "F", but can
	be translated into a different language by changing the values of these co=
nstants. Our
	aircrafts all have six seats in each row, with three seats on each side of=
 the
	aisle: <code>SA</code>,
	<code>SB</code>, <code>SC</code> on one side, and <code>SD</code>, <code>S=
E</code>,
	and <code>SF</code> on the other. Seats <code>SA</code> and <code>SF</code=
> are window
	seats, seats <code>SB</code> and <code>SE</code> are middle seats, and sea=
ts <code>SC</code>
	and <code>SD</code> are aisle seats.
      </li>
      <li>
	Characters starting at index <code>FFN</code> are special and represent th=
e frequent flyer
	number for the passenger this ticket belongs to, if they have one. The val=
ue
	of <code>FFN</code> must be 17 on a valid ticket, meaning the frequent fly=
er number always
	appears as the last record in the ticket string. Some tickets do no have a=
 record for
	frequent flyer number, meaning the corresponding string is the empty
	string <code>''</code>. Some tickets have a record for frequent flyer numb=
er, in which case
	this number appears between indices 17 and 20, inclusive. The empty string=
 is a valid
	frequent flyer number. A valid non-empty frequent flyer number must contai=
n exactly four
	digits, and the sum of the first three digits modulo 10 must be the same a=
s the last
	(fourth) digit.
      </li>
      <li> Here are some examples of valid tickets.
	<ul>
	  <li>
	    Suppose the values of our constants are <code>YR =3D 0</code>, <code>M=
ON =3D
	    4</code>, <code>DAY =3D 6</code>, <code>DEP =3D 8</code>, <code>ARR =
=3D 11</code>, <code>ROW =3D
	    14</code>, <code>SEAT =3D 16</code>, and <code>FFN =3D 17</code>. The =
ticket below is for
	    December 21, 2023 for a flight from YYZ to YEG in seat 25F. The passen=
ger's flyer number
	    is 4442. (Note that <code>4 + 4 + 4 mod 10 is 2</code>).

<pre>            20231221YYZYEG25F4442</pre>
	  </li>
	  <li>
	    Suppose now the values of our constants are <code>YR =3D 10</code>, <c=
ode>MON =3D
	    8</code>, <code>DAY =3D 6</code>, <code>DEP =3D 0</code>, <code>ARR =
=3D 3</code>, <code>ROW =3D
	    14</code>, <code>SEAT =3D 16</code>, and <code>FFN =3D 17</code>. The =
ticket below is for
	    September 20, 2024 for a flight from YYZ to LAS in seat 16D. The passe=
nger's flyer number
	    is 4420. (Note that <code>4 + 4 + 2 mod 10 is 0</code>).

<pre>            YYZLAS2009202416D4420</pre>
	  </li>
	</ul>
      </li>
    </ul>


    <h3 id=3D"constants">Constants</h3>
    <p>
      Constants are special variables whose values should not change once a=
ssigned. A different
      naming convention (uppercase pothole) is used for constants, so that =
programmers know to not
      change their values. For example, in the starter code, the constant <=
code>YR</code> (for
      "year") is assigned the value 1 at the beginning of the module and th=
e value
      of <code>YR</code> should never change in your code.  When writing yo=
ur code, if you need to
      use the index at which a ticket contains the year, you should use <co=
de>YR</code> and not the
      value 1. The same goes for the other constant values.
    </p>
    <p>
      Using constants simplifies code modifications and improves readabilit=
y and changeability.  For
      example, if we later decide to use French instead of English, we woul=
d only have to make the
      changes in one place (the <code>WINDOW</code>, <code>AISLE</code>, an=
d <code>MIDDLE</code>
      assignment statements in the file <code>constants.py</code>), rather =
than throughout the
      program.  This also makes our code more readable =E2=80=94 whether we=
 use <code>1</code> or any
      other index to store the year on the ticket, we write our code using =
the
      constant <code>YR</code> so it is clear to the reader what we mean.
    </p>

    <p>
      You should <strong>read the file <code>constants.py</code> carefully<=
/strong> to understand
      the purpose of each defined constant.  You must use these constants i=
n your code and not the
      literal values.  For example, you must use <code>YR</code> instead of=
 <code>0</code> to earn
      full marks.
    </p>

    <h2>What to do</h2>

    <p>
      In the starter code file <code>tickets.py</code>, complete the follow=
ing function
      definitions. <strong>Note that some are already provided for you to u=
se as examples!</strong>
      Use the Function Design Recipe that you have been learning in this co=
urse. We have included
      the type contracts in the following table; please read through the ta=
ble to understand how the
      functions will be used.
    </p>
    <p>
      We will be evaluating your docstrings in addition to your code. Pleas=
e include <strong>at
      least two examples</strong> in each docstring. You will need to parap=
hrase the full
      descriptions of the functions to get an appropriate docstring descrip=
tion. Your docstring
      examples should be <strong>valid doctests</strong> =E2=80=94 we will =
<strong>run</strong> them
      as part of evaluation of your program.
    </p>

    <h3> Task 1: Getting the Information (7 correctness marks)</h3>

    <p>
      <strong>Advice</strong>: Start working on these functions as soon as =
the assignment is
	released. You have already learned all material needed to complete them.
    </p>

    <table class=3D"padded">
      <caption id=3D"functions_table_getters">
        <strong>Functions to write for A1: Getting Ticket Info </strong>
      </caption>
      <tbody><tr>
        <th style=3D"width:20%">
          Function name:<br>
          (Parameter types) -&gt; Return type
        </th>
        <th style=3D"width:80%">
          Full Description (paraphrase to get a proper docstring descriptio=
n)
        </th>
      </tr>

      <tr>
        <td>
          <code>get_date:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the da=
te on the given
	    ticket in the format <code>YYYYMMDD</code>. You may assume the input t=
icket is valid.
	  </p>
	  <p>
	    For example, if the constants have values <code>YR =3D 0</code>, <code=
>MON =3D
	    4</code>, <code>DAY =3D 6</code>, and the input ticket string
	    is <code>'20231221YYZYEG25F4442'</code>, this function should
	    return <code>'20231221'</code>.
	  </p>
	  <p>
	    As another example, if the constants have values <code>YR =3D 10</code=
>, <code>MON =3D
	    8</code>, <code>DAY =3D 6</code>, and the input ticket string
	    is <code>'YYZLAS2009202416D4420'</code>, this function should return <=
code>'20240920'</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_year:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the ye=
ar on the given
	    ticket in the format <code>YYYY</code>.  You may assume the input tick=
et is valid.
	  </p>
	  <p>
	    See function <code>get_date</code> for examples.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_month:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the mo=
nth on the given
	    ticket in the format <code>MM</code>.  You may assume the input ticket=
 is valid.
	  </p>
	  <p>
	    See function <code>get_date</code> for examples.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_day:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the da=
y on the given
	    ticket in the format <code>DD</code>.  You may assume the input ticket=
 is valid.
	  </p>
	  <p>
	    See function <code>get_date</code> for examples.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_departure:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the de=
parture airport
	    code on the given ticket.  You may assume the input ticket is valid.
	  </p>
	  <p>
	    For example, if the constant <code>DEP</code> has value <code>8</code>=
, and the input
	    ticket string is <code>'20231221YYZYEG25F4442'</code>, this function s=
hould
	    return <code>'YYZ'</code>.
	  </p>
	  <p>
	    As another example, if the constant <code>DEP</code> has value <code>0=
</code>, and the
	    input ticket string is <code>'YYZLAS2009202416D4420'</code>, this func=
tion should
	    return <code>'YYZ'</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_arrival:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the ar=
rival airport
	    code on the given ticket.  You may assume the input ticket is valid.
	  </p>
	  <p>
	    For example, if the constant <code>ARR</code> has value <code>11</code=
>, and the input
	    ticket string is <code>'20231221YYZYEG25F4442'</code>, this function s=
hould
	    return <code>'YEG'</code>.
	  </p>
	  <p>
	    As another example, if the constant <code>ARR</code> has value <code>3=
</code>, and the
	    input ticket string is <code>'YYZLAS2009202416D4420'</code>, this func=
tion should
	    return <code>'LAS'</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_row:</code><br>
          <code>(str) -&gt; int</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the ro=
w number on the
	    given ticket.  You may assume the input ticket is valid.
	  </p>
	  <p>
	    For example, if the constant <code>ROW</code> has value <code>14</code=
>, and the input
	    ticket string is <code>'20231221YYZYEG25F4442'</code>, this function s=
hould
	    return <code>25</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_seat:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the se=
at on the
	    given ticket.  You may assume the input ticket is valid.
	  </p>
	  <p>
	    For example, if the constant <code>SEAT</code> has value <code>16</cod=
e>, and the input
	    ticket string is <code>'20231221YYZYEG25F4442'</code>, this function s=
hould
	    return <code>'F'</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_ffn:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the fr=
equent flyer
	    number on the given ticket.  You may assume the input ticket is valid.
	  </p>
	  <p>
	    For example, if the input ticket string is <code>'20231221YYZYEG25F444=
2'</code>, this
	    function should return <code>'4442'</code>. If the input ticket string
	    is <code>'20231221YYZYEG25F'</code>, this function should return <code=
>''</code>.
	  </p>
        </td>
      </tr>
    </tbody></table>


    <h3> Task 2: Validating the Information (12 correctness marks)</h3>

    <p>
      <strong>Advice</strong>: Start working on these functions as soon as =
the assignment is
	released. You can complete the headers and docstrings for all of them now,=
 and then complete
	the implementations after the week of Sep 25 classes are done.
    </p>

    <table class=3D"padded">
      <caption id=3D"functions_table_validity">
        <strong>Functions to write for A1: Validating Ticket Info </strong>
      </caption>
      <tbody><tr>
        <th style=3D"width:20%">
          Function name:<br>
          (Parameter types) -&gt; Return type
        </th>
        <th style=3D"width:80%">
          Full Description (paraphrase to get a proper docstring descriptio=
n)
        </th>
      </tr>

      <tr>
        <td>
          <code>is_valid_seat:</code><br>
          <code>(str, int, int) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The first parameter represents the ticket. The second parameter repres=
ents the number of
	    the first row in the plane. The third parameter represents the number =
of the last row in
	    the plane. The function should return True if and only if the seat, in=
cluding the row
	    number and the seat within that row, of this ticket is
	    valid. See <a href=3D"https://www.utsc.utoronto.ca/~atafliovich/csca08=
/assignments/a1/index.html#ticket">above</a> for explanations of ticket val=
idity. You may
	    assume that the <strong>format</strong> of the ticket string is valid:=
 see provided
	    helper function <code>is_valid_ticket_format</code>.
	  </p>
	  <p>
	    For example, if the values of the constants are <code>ROW =3D 14</code=
> and <code>SEAT =3D
	    16</code>, and the input ticket string is <code>'20230915YYZYEG12F1236=
'</code>, the
	    second argument is <code>1</code>, and the third argument is <code>30<=
/code>, then the
	    function should return <code>True</code>.
	  </p>
	  <p>
	    If, however, the input ticket string is <code>'20230915YYZYEG32F1236'<=
/code>, the second
	    argument is <code>1</code>, and the third argument is <code>30</code>,=
 then the function
	    should return <code>False</code>.
	  </p>
	  <p>
	    Similarly, if the input ticket string is <code>'20230915YYZYEG12H1236'=
</code>, the second
	    argument is <code>1</code>, and the third argument is <code>30</code>,=
 then the function
	    should return <code>False</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>is_valid_ffn:</code><br>
          <code>(str) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return True i=
f and only if the
	    frequent flyer number of this ticket is valid. See <a href=3D"https://=
www.utsc.utoronto.ca/~atafliovich/csca08/assignments/a1/index.html#ticket">=
above</a> for
	    explanations of ticket validity. You may assume that the <strong>forma=
t</strong> of the
	    ticket string is valid: see provided helper
	    function <code>is_valid_ticket_format</code>.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>is_valid_date:</code><br>
          <code>(str) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return True i=
f and only if the
	    date of this ticket is valid. See <a href=3D"https://www.utsc.utoronto=
.ca/~atafliovich/csca08/assignments/a1/index.html#ticket">above</a> for exp=
lanations of ticket
	    validity. You may assume that the <strong>format</strong> of the ticke=
t string is valid:
	    see provided helper function <code>is_valid_ticket_format</code>.
	  </p>
	  <p>
	    <em>Hint</em>: this is possibly the most challenging function in this =
assignment. You
	    may want to implement it last.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>is_valid_ticket:</code><br>
          <code>(str, int, int) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The first parameter represents the ticket. The second parameter repres=
ents the number of
	    the first row in the plane. The third parameter represents the number =
of the last row in
	    the plane. The function should return True if and only if the ticket i=
s in valid format
	    and all of the ticket information on this ticket is
	    valid. See <a href=3D"https://www.utsc.utoronto.ca/~atafliovich/csca08=
/assignments/a1/index.html#ticket">above</a> for explanations of ticket val=
idity. <i>Hint</i>:
	    use the provided helper function <code>is_valid_ticket_format</code>.
	  </p>
        </td>
      </tr>
    </tbody></table>

    <h3> Task 3: Analysing the Information  (12 correctness marks)</h3>

    <p>
      <strong>Advice</strong>: Start working on these functions as soon as =
the assignment is
	released. You can complete the headers and docstrings for all of them now,=
 and then complete
	the implementations after the week of Sep 25 classes are done.
    </p>

    <table class=3D"padded">
      <caption id=3D"functions_table_analysis">
        <strong>Functions to write for A1: Analysing Ticket Info </strong>
      </caption>
      <tbody><tr>
        <th style=3D"width:20%">
          Function name:<br>
          (Parameter types) -&gt; Return type
        </th>
        <th style=3D"width:80%">
          Full Description (paraphrase to get a proper docstring descriptio=
n)
        </th>
      </tr>

      <tr>
        <td>
          <code>visits_airport:</code><br>
          <code>(str, str) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The first parameter represents the ticket. The second parameter repres=
ents the airport
	    code. The function should return <code>True</code> if and only if this=
 flight either
	    begins or ends in the given airport. You may assume the ticket is vali=
d.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>connecting:</code><br>
          <code>(str, str) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The parameters represent two tickets. The function should return <code=
>True</code> if
	    and only if the two flights are connecting: the first flight arrives i=
n the same airport
	    as the departure point of the second flight, and the two flights are o=
n the same dates.
	    You may assume the tickets are valid.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>adjacent:</code><br>
          <code>(str, str) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The parameters represent two tickets. The function should return <code=
>True</code> if
	    and only if the seats on the two tickets are adjacent, i.e. they are n=
ext to each other
	    in the same row. Seats that are across an aisle are not considered adj=
acent. You do not
	    need to check the date, nor the departure/arrival airports in this fun=
ction.  You may
	    assume the tickets are valid.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>behind:</code><br>
          <code>(str, str) -&gt; bool</code>
        </td>
        <td>
	  <p>
	    The parameters represent two tickets. The function should return <code=
>True</code> if
	    and only if the seats on the two tickets are one immediately behind an=
other. You do not
	    need to check the date, nor the departure/arrival airports in this fun=
ction.  You may
	    assume the tickets are valid.
	  </p>
        </td>
      </tr>
      <tr>
        <td>
          <code>get_seat_type:</code><br>
          <code>(str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    The parameter represents the ticket. The function should return the ty=
pe of the seat on
	    the given ticket: <code>WINDOW</code>, <code>MIDDLE</code>, or <code>A=
ISLE</code>.  You
	    may assume the ticket is valid.
	  </p>
        </td>
      </tr>
    </tbody></table>

    <h3> Task 4: Changing the Information (BONUS 4 correctness marks)</h3>

    <table class=3D"padded">
      <caption id=3D"functions_table_change">
        <strong>Functions to write for A1: Changing Ticket Info </strong>
      </caption>
      <tbody><tr>
        <th style=3D"width:20%">
          Function name:<br>
          (Parameter types) -&gt; Return type
        </th>
        <th style=3D"width:80%">
          Full Description (paraphrase to get a proper docstring descriptio=
n)
        </th>
      </tr>

      <tr>
        <td>
          <code>change_seat:</code><br>
          <code>(str, str, str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    <em>Note</em>: this function is not required; completing it will earn =
you bonus marks.
	  </p>
	  <p>
	    The first parameter represents the ticket. The second parameter repres=
ents the row
	    number. The third parameter represents the seat within that row. The f=
unction should
	    return a new ticket that is in the same format as the input ticket, ha=
s the same
	    departure, arrival, date, and frequent flyer number as the input ticke=
t, and has a new
	    seat information with the given row and seat. You may assume the ticke=
t and the new seat
	    information are valid.
	  </p>
	  <p>
	    For example, if the values of the constants are <code>ROW =3D 14</code=
> and <code>SEAT =3D
	    16</code>, and the input ticket string is <code>'20230915YYZYEG12F1236=
'</code>, the
	    second argument is <code>'24'</code>, and the third argument is <code>=
'A'</code>, then
	    the function should return <code>'20230915YYZYEG24A1236'</code>.
	  </p>
	</td>
      </tr>
      <tr>
        <td>
          <code>change_date:</code><br>
          <code>(str, str, str, str) -&gt; str</code>
        </td>
        <td>
	  <p>
	    <em>Note</em>: this function is not required; completing it will earn =
you bonus marks.
	  </p>
	  <p>
	    The first parameter represents the ticket. The second parameter repres=
ents the day. The
	    third parameter represents the months. The last parameter represents t=
he year. The
	    function should return a new ticket that is in the same format as the =
input ticket, has
	    the same departure, arrival, seat information, and frequent flyer numb=
er as the input
	    ticket, and has a new date.  You may assume the ticket and the new dat=
e information are
	    valid.
	  </p>
	  <p>
	    For example, if the values of the constants are <code>YEAR =3D 0</code=
>, <code>MON =3D
	    4</code>, and <code>DAY =3D 6</code>, and the input ticket string
	    is <code>'20230915YYZYEG12F1236'</code>, the second argument is <code>=
'20'</code>, the
	    third argument is <code>'10'</code>, and the last argument is <code>'2=
024'</code>, then
	    the function should return <code>'20241020YYZYEG12F1236'</code>.
	  </p>
	</td>
      </tr>
    </tbody></table>


  <h3>Using Constants</h3>
    <p>
      As we discuss in section <a href=3D"https://www.utsc.utoronto.ca/~ata=
fliovich/csca08/assignments/a1/index.html#constants">Constants</a> above, y=
our code should make use
      of the provided constants. If the value of one of those constants wer=
e changed, and your
      program rerun, your functions should work with those new values.
    </p>
    <p>
      For example, if <code>YR</code> were changed, then your functions sho=
uld work according to the
      new number of bonus points that should be earned for guessing a conso=
nant.  Using constants in
      your code means that this happens automatically.
    </p>
    <p>
      Your docstring examples should reflect the given <strong>values</stro=
ng> of the constants in
      the provided starter code, and <strong>do not need to change</strong>=
.
    </p>

    <h3>No Input or Output</h3>
    <p>
      Your <code>tickets.py</code> file should contain the starter code, pl=
us the function
      definitions specified above.
      <code>tickets.py</code> must <em>not</em> include any calls to the <c=
ode>print</code>
      and <code>input</code> functions.  Do <em>not</em> add any <code>impo=
rt</code> statements.
      Also, do <em>not</em> include any function calls or other code outsid=
e of the function
      definitions.
    </p>


    <h2 id=3D"checker">A1 Checker</h2>
    <p>
      We are providing a checker module (<code>a1_checker.py</code>) that t=
ests two things:
    </p>
    <ul>
      <li>
	whether your code follows the Python
        <a href=3D"https://www.utsc.utoronto.ca/~atafliovich/csca08/assignm=
ents/a1/python_style_guide.html">style guidelines</a>, and
      </li>
      <li>
	whether your functions are named correctly, have the correct number of par=
ameters, and
	return the correct types.
      </li>
    </ul>

    <p>
      To run the checker, open <code>a1_checker.py</code> and run it.  Note=
: the checker file should
      be in the <strong>same</strong> directory as your <code>tickets.py</c=
ode>, as provided in the
      starter code zip file.  Be sure to scroll up to the top and read all =
messages!
    </p>
    <p>
      <strong>If the checker passes for both style and types:</strong>
    </p>
    <ul>
      <li>
        Your code follows the style guidelines.
      </li>
      <li>
	Your function names, number of parameters, and return types match the assi=
gnment
        specification. <strong>This does not mean that your code works corr=
ectly in all
        situations.</strong> We will run a <em>different</em> set of tests =
on your code once you
        hand it in, so be sure to thoroughly test your code yourself before=
 submitting.
      </li>
    </ul>

    <p>
      <strong>If the checker fails, carefully read the message provided:</s=
trong>
    </p>
    <ul>
       <li>
	 It may have failed because your code did not follow the style guidelines.=
  Review the error
	 description(s) and fix the code style.  Please see
	 the <a href=3D"http://www.cs.toronto.edu/~david/pyta/">PyTA documentation=
</a> for more
	 information about errors.
       </li>
       <li>
	 It may have failed because:
	 <ul>
	   <li>you are missing one or more functions, </li>
	   <li>one or more of your functions are misnamed,</li>
	   <li>one or more of your functions have incorrect number or types of par=
ameters, or</li>
	   <li>one of more of your functions return values of types that do not ma=
tch the assignment specification.</li>
	 </ul>

	 <p>
	   Read the error messages to identify the problematic functions, review t=
he function
	   specifications in the handout, and fix your code.
	 </p>
      </li>
    </ul>

    <p>
      Make sure the checker passes before submitting.
    </p>

    <h2>Marking</h2>

    <p>
      These are the aspects of your work that may be marked for A1:
    </p>
    <ul>
      <li>
        <strong>Coding style (20%):</strong>
        <ul>
          <li>
	    Make sure that you follow Python <a href=3D"https://www.utsc.utoronto.=
ca/~atafliovich/csca08/assignments/a1/python_style_guide.html">style guidel=
ines</a>
            that we have introduced and the Python coding conventions that =
we have been using
            throughout the semester.  Although we do not provide an exhaust=
ive list of style rules,
            the checker tests for style are complete, so if your code passe=
s the checker, then it
            will earn full marks for coding style with one exception: <em>d=
ocstrings will be
            evaluated separately</em>. For each occurrence of a PyTA error,=
 one mark (out of 20)
            deduction will be applied.  For example, if a C0301 (line-too-l=
ong) error occurs 3
            times, then 3 marks will be deducted.
	  </li>

          <li>
	    All functions, including helper functions, should have complete docstr=
ings including
	    preconditions when you think they are necessary and at least two valid=
 examples.
	  </li>
	</ul>
      </li>

      <li> <strong>Correctness (80%):</strong>
	<p>
	  Your functions should perform as specified. Correctness, as measured by =
our tests, will
          count for the largest single portion of your marks.  Once your as=
signment is submitted, we
          will run additional tests not provided in the checker. Passing th=
e checker <strong>does
          not</strong> mean that your code will earn full marks for correct=
ness.
	</p>
	<p>
	  Note that for full marks <strong>all docstring examples you provide shou=
ld run without
	  producing errors</strong>.
	</p>
      </li>
    </ul>

    <h2>What to Hand In</h2>

    <p style=3D"color: brown; font-weight: bold;">
      The very last thing you do before submitting should be to run the che=
cker program one last
      time.
    </p>
    <p>
      Otherwise, you could make a small error in your final changes before =
submitting that causes
      your code to receive zero for correctness.
    </p>
    <p>
      Submit <code>tickets.py</code> on MarkUs by following the instruction=
s on the course
      website. Remember that spelling of filenames, including case, counts:=
 your file must be named
      exactly as above.
    </p>
 =20

</body><grammarly-desktop-integration data-grammarly-shadow-root=3D"true"><=
template shadowmode=3D"open"><div aria-label=3D"grammarly-integration" role=
=3D"group" tabindex=3D"-1" class=3D"grammarly-desktop-integration" data-con=
tent=3D"{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;=
isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integrati=
on></html>
------MultipartBoundary--Vo78ScV8lIYCIOiOemDYz7G8Du3bdCLrVIdDIfHPeK----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.utsc.utoronto.ca/~atafliovich/csca08/assignments/a1/style.css

@charset "utf-8";

html, body, div, h1, h2, h3, h4, h5, h6, p, ul, ol, dl, table { font-family=
: Verdana, Geneva, Lucida, Helvetica, Arial, sans-serif; }

pre { font-family: monospace; margin-left: 2em; }

pre.noindent { margin-left: 0em; }

hr { height: 1px; }

h2 { border-bottom: 1px solid rgb(102, 153, 204); border-top: 1px solid rgb=
(102, 153, 204); color: rgb(102, 153, 204); }

html, body, table { background: rgb(255, 255, 255); color: rgb(0, 0, 0); }

table { border-collapse: collapse; }

table, th, td { border: 1px solid black; padding: 5px; }

caption { display: table-caption; text-align: center; caption-side: bottom;=
 font-size: 80%; }

tbody tr:nth-child(2n+1) { background-color: rgba(175, 175, 175, 0.1); }

tbody tr:nth-child(2n) { background-color: rgba(255, 255, 255, 0.1); }

img { border: 0px; }

img.b4 { width: 16.83em; height: 9.06em; }

div.content { clear: both; position: absolute; float: left; margin-left: 20=
%; width: 78%; }

div.title { padding-right: 1em; text-align: right; font-size: 75%; border: =
3px solid rgb(102, 153, 204); margin-bottom: 2.5ex; background-color: rgb(1=
02, 153, 204); color: white; }

#dropin { color: green; }

#helpcentre { color: blue; }

p { padding: 0px; margin-top: 1px; }

li, li p, li pre, dd p, dd pre { margin-top: 0.5em; }

p + pre, pre + p, li > pre:first-child, dd > pre:first-child { margin-top: =
0.5em; }

ul.toc { list-style-type: none; }

.toc li, .compressed li { margin-top: 0em; }

.toc li.major { margin-top: 0.5em; }

dt { margin-top: 0.5em; font-weight: bold; }

dd { margin-top: 0em; }

table.simple-numeric { border-collapse: separate; border-spacing: 0.8em 0em=
; }

table.optionlist { border-collapse: separate; border-spacing: 1em 0em; }

td.ctr, th.ctr { text-align: center; }

div.campus_announcements { position: absolute; clear: none; float: left; wi=
dth: 38%; margin-left: 20%; }

div.campus_announcements .date { float: right; background: white; color: rg=
b(102, 153, 204); font-family: Courier, fixed; font-weight: bold; }

div.campus_announcements .title { float: left; background: white; color: rg=
b(102, 153, 204); font-weight: bold; }

div.campus_announcements .body { clear: both; background: white; color: rgb=
(102, 153, 204); }

div.campus_announcements ul { padding-left: 0px; margin-left: 0px; }

div.campus_announcements ul > li { list-style: none; margin: 0px; padding: =
0.25em; border-top: 1px solid gray; }

div.course_announcements { position: absolute; clear: none; float: left; wi=
dth: 38%; margin-left: 59%; }

div.course_announcements .date { float: right; background: white; color: rg=
b(102, 153, 204); font-family: Courier, fixed; font-weight: bold; }

div.course_announcements .title { float: left; background: white; color: rg=
b(102, 153, 204); font-weight: bold; }

div.course_announcements .body { clear: both; background: white; color: rgb=
(102, 153, 204); }

div.course_announcements ul { padding-left: 0px; margin-left: 0px; }

div.course_announcements ul > li { list-style: none; margin: 0px; padding: =
0.25em; border-top: 1px solid gray; }

a:link { color: rgb(0, 51, 119); }

a:visited { color: rgb(0, 51, 119); }

.clear { clear: both; font-size: 1px; }

.footer { clear: none; margin-left: 20%; margin-top: 1px; text-align: right=
; border-top: 3px solid white; }

.footer .left { margin-top: 1px; float: left; text-align: left; width: 60%;=
 }

.footer .right { margin-top: 1px; float: right; text-align: right; width: 4=
0%; }

.spacer { clear: both; }

div.navigation { clear: both; position: absolute; float: left; padding-left=
: 5px; padding-right: 5px; width: 18%; background-color: rgb(102, 153, 204)=
; color: white; }

.navigation .links { text-align: right; }

div.navigation p { color: white; }

div.navigation p:first-child { border-top: none; }

div.navigation a, div.navigation em { display: block; margin: 0px 0.5em; }

div.navigation a, div.navigation em { border-top: 2px solid white; }

div.navigation a:first-child { border-top: none; }

div.navigation a:link { text-decoration: none; color: white; }

div.navigation a:visited { text-decoration: none; color: white; }

div.navigation a:hover { background: white; color: black; }

div.navigation a.validate:hover { background: rgb(106, 40, 126); color: whi=
te; }

@media print {
  div.navigation { display: none; }
  div.content { float: none; width: 100%; margin-left: 0px; }
}
------MultipartBoundary--Vo78ScV8lIYCIOiOemDYz7G8Du3bdCLrVIdDIfHPeK------
